{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { loadAsync } from 'expo-font';\nimport { useEffect, useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport PixelRatio from \"react-native-web/dist/exports/PixelRatio\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport useColorScheme from \"react-native-web/dist/exports/useColorScheme\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function App() {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isReady = _useState2[0],\n    setReadyState = _useState2[1];\n  var loadAsync = function loadAsync() {\n    return Promise.all([loadAsync('antoutline', require('@ant-design/icons-react-native/fonts/antoutline.ttf')), loadAsync('antfill', require('@ant-design/icons-react-native/fonts/antfill.ttf'))]);\n  };\n  if (isReady) {\n    return _jsx(_Fragment, {});\n  }\n  return _jsx(View, {\n    children: _jsx(View, {\n      children: _jsx(Text, {\n        children: \"loading...\"\n      })\n    })\n  });\n}","map":{"version":3,"names":["loadAsync","useEffect","useState","Text","View","StatusBar","PixelRatio","Dimensions","useColorScheme","Fragment","_Fragment","jsx","_jsx","App","_useState","_useState2","_slicedToArray","isReady","setReadyState","Promise","all","require","children"],"sources":["/Users/gavin/Documents/src/open_course/packages/normal/48_rn_coding/0604/code/App.js"],"sourcesContent":["import { loadAsync } from 'expo-font';\nimport { useEffect, useState } from 'react';\nimport {  Text, View, StatusBar, PixelRatio, Dimensions, useColorScheme } from 'react-native';\n\nexport default function App() {\n\n  const [ isReady, setReadyState ] = useState(false);\n\n  const loadAsync = () => Promise.all([\n    loadAsync(\n      'antoutline',\n      require('@ant-design/icons-react-native/fonts/antoutline.ttf')\n    ),\n    loadAsync(\n      'antfill',\n      require('@ant-design/icons-react-native/fonts/antfill.ttf')\n    ),\n  ])\n\n  if(isReady) {\n    return <></>\n  }\n\n  return <View>\n      <View><Text>loading...</Text></View>\n  </View>\n}\n\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,WAAW;AACrC,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,SAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,cAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,GAAA,IAAAC,IAAA;AAG5C,eAAe,SAASC,GAAGA,CAAA,EAAG;EAE5B,IAAAC,SAAA,GAAmCZ,QAAQ,CAAC,KAAK,CAAC;IAAAa,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA1CG,OAAO,GAAAF,UAAA;IAAEG,aAAa,GAAAH,UAAA;EAE9B,IAAMf,SAAS,GAAG,SAAZA,SAASA,CAAA;IAAA,OAASmB,OAAO,CAACC,GAAG,CAAC,CAClCpB,SAAS,CACP,YAAY,EACZqB,OAAO,CAAC,qDAAqD,CAC/D,CAAC,EACDrB,SAAS,CACP,SAAS,EACTqB,OAAO,CAAC,kDAAkD,CAC5D,CAAC,CACF,CAAC;EAAA;EAEF,IAAGJ,OAAO,EAAE;IACV,OAAOL,IAAA,CAAAF,SAAA,IAAI,CAAC;EACd;EAEA,OAAOE,IAAA,CAACR,IAAI;IAAAkB,QAAA,EACRV,IAAA,CAACR,IAAI;MAAAkB,QAAA,EAACV,IAAA,CAACT,IAAI;QAAAmB,QAAA,EAAC;MAAU,CAAM;IAAC,CAAM;EAAC,CAClC,CAAC;AACT"},"metadata":{},"sourceType":"module"}